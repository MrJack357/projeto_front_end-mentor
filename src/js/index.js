// 1. Pegar o elemento de  **bot√£o** para ser adicionado o **evento de clique** nele.


// 2. Pegar o elemento de **id do conselho** 

// 3. Pegar o elemento de **descri√ß√£o do conselho**

// 4. Ap√≥s conseguirmos os elementos do html, √© necess√°rio a cria√ß√£o da **fun√ß√£o respons√°vel por pegar os dados da API**. A melhor forma de se consumir a api √© usando **async await**. Caso n√£o tenha visto a aula, sugiro que assista novamente. Nas refer√™ncias ficar√° um link com exemplos.

// 5. Importante que durante a chamada a api seja feito o tratamento dos erros usando o **try-catch,** caso n√£o lembre pode assistir a aula novamente. 

// 6. Dentro da fun√ß√£o, ap√≥s pegarmos os dados da API, √© necess√°rio atualizar o conte√∫do do id e descri√ß√£o do conselho que colocamos em uma vari√°vel usando o **innertText**. A diferen√ßa entre innerText e innerHTML: 
// O innerHTML pode adicionar ou pegar elementos HTML , j√° com o innerText isso n√£o √© possivel, ele pode apenas atribuir um texto ou pegar o texto de determinado elemento.
// Nesse caso, queremos s√≥ atribuir um texto, por isso usamos o innerText

// 7. Por fim, basta chamar a fun√ß√£o criada

// 8. Atribuir a fun√ß√£o que criamos para ser executada no evento do clique do bot√£o ou se preferir, criar o escopo da fun√ß√£o dentro do listener.


document.addEventListener("DOMContentLoaded", () => {
    // 1Ô∏è‚É£ Capturar os elementos do HTML
    const botao = document.getElementById("randomAdvice");
    const numeroConselho = document.getElementById("numeroConselho");
    const conselhoTexto = document.getElementById("conselho");

    // 2Ô∏è‚É£ Criar a fun√ß√£o ass√≠ncrona para buscar dados da API
    async function buscarConselho() {
        try {
            // 3Ô∏è‚É£ Fazer a requisi√ß√£o para a API
            const resposta = await fetch("https://api.adviceslip.com/advice");
            
            // 4Ô∏è‚É£ Verificar se a resposta da API √© v√°lida
            if (!resposta.ok) {
                throw new Error("Erro ao buscar conselho");
            }
            
            // 5Ô∏è‚É£ Converter os dados para JSON
            const dados = await resposta.json();
            
            // 6Ô∏è‚É£ Atualizar o HTML com os dados da API
            numeroConselho.innerText = `ADVICE #${dados.slip.id}`;
            conselhoTexto.innerText = `"${dados.slip.advice}"`;
        } catch (erro) {
            // 7Ô∏è‚É£ Lidar com erros
            console.error("Erro ao buscar conselho:", erro);
            conselhoTexto.innerText = "Erro ao carregar conselho. Tente novamente.";
        }
    }

    // 8Ô∏è‚É£ Criar uma fun√ß√£o tempor√°ria para testar conselhos longos
    function testarConselhoLongo() {
        numeroConselho.innerText = "ADVICE #12";
        conselhoTexto.innerText = "Este √© um conselho extremamente longo que serve para testar a responsividade do layout. Se o texto quebrar ou sair da tela, ajustes no CSS s√£o necess√°rios para garantir uma exibi√ß√£o adequada.";
    }

    // 9Ô∏è‚É£ Associar a fun√ß√£o ao bot√£o
    botao.addEventListener("click", buscarConselho);

    // üîü Carregar um conselho automaticamente ao iniciar a p√°gina
    //buscarConselho();
    
    // 1Ô∏è‚É£1Ô∏è‚É£ Ativar o teste de conselho longo descomentando a linha abaixo
    testarConselhoLongo();
});

